{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","Text","toLocaleLowerCase","charAt","slice","document","getElementById","select","navigator","clipboard","writeText","split","join","length","defaultProps","aboutText","Alert","alert","role","word","lower","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.6ede01f8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">\r\n                {props.aboutText}\r\n              </Link>\r\n            </li> */}\r\n          </ul>\r\n          {/* switch */}\r\n          <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark': 'light'}`}>\r\n            <input\r\n              className=\"form-check-input\"\r\n              onClick ={props.toggleMode}\r\n              type=\"checkbox\"\r\n              id=\"flexSwitchCheckDefault\"\r\n            />\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">\r\n            {`${props.mode === 'light' ? 'Enable Dark Mode': 'Disable Dark Mode'}`}\r\n            </label>\r\n          </div>\r\n          {/* <form className=\"d-flex\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-primary\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form> */}\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\n// this is the types of props(string,array,number,object)\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string.isRequired,\r\n};\r\n\r\n// if you wanna set default props or you haven't pass any values through component\r\nNavbar.defaultProps = {\r\n  title: \"Set title here\",\r\n  aboutText: \"About\",\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\n// console.log(useState('Enter text here2 '));\r\n\r\nexport default function TextForm(props) {\r\n\r\n  const handleUpClick = () => {\r\n    // console.log(\"Uppercase was clicked \" + text);\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to Uppercase\",\"success\")\r\n  };\r\n\r\n  // To convert text into lowercase\r\n  const handleLoClick = () => {\r\n    // console.log(\"Uppercase was clicked \" + text);\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to Lowercase\",\"success\")\r\n  };\r\n  const handleCapitalizeClick = () => {\r\n    let Text = text.toLocaleLowerCase();\r\n    let newText = Text.charAt(0).toUpperCase() + Text.slice(1);\r\n    setText(newText);\r\n    props.showAlert(\"capitalization completed\",\"success\")\r\n  };\r\n\r\n  // to clear the existing text\r\n  const handleClearClick = () => {\r\n    let newText = \"\";\r\n    setText(newText);\r\n    props.showAlert(\"All text are cleared\",\"success\")\r\n  };\r\n\r\n //to copy the text\r\n   const handleCopy = ()=>{\r\n      let text = document.getElementById('myBox');\r\n      text.select();\r\n      navigator.clipboard.writeText(text.value);\r\n      props.showAlert(\"Text is copied\",\"success\") \r\n   }\r\n\r\n//   to handle extra spaces\r\n    const handleExtraSpaces = () =>{\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"))\r\n        props.showAlert(\"All extra spaces are removed\",\"success\")\r\n    }\r\n\r\n  //for allow to type in textarea\r\n  const handleOnChange = (event) => {\r\n    // console.log(\"on changed\");\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const [text, setText] = useState(\"\");\r\n  //   text = \"newtext\"wrong way to change the state\r\n  //  setText(\"new text\");correct way\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\" style={{color: props.mode === 'light'? 'black': 'white'}}>\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            value={text}\r\n            onChange={handleOnChange}\r\n            style={{backgroundColor: props.mode === 'light'? 'white': '#042743',color: props.mode === 'light'? 'black': 'white'}}\r\n            id=\"myBox\"\r\n            rows=\"8\"\r\n          ></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>\r\n          Convert to Uppercase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleLoClick}>\r\n          Convert to Lowercase\r\n        </button>\r\n        <button\r\n          className=\"btn btn-primary mx-2\"\r\n          onClick={handleCapitalizeClick}\r\n        >\r\n          Capitalize text\r\n        </button>\r\n        <button\r\n          className=\"btn btn-primary mx-2 my-3\"\r\n          onClick={handleCopy}\r\n        >\r\n          Copy Text\r\n        </button>\r\n        <button\r\n          className=\"btn btn-primary mx-2 my-3\"\r\n          onClick={handleExtraSpaces}\r\n        >\r\n          Remove Extra Spaces\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleClearClick}>\r\n          Clear text\r\n        </button>\r\n      </div>\r\n      <div className=\"container my-3\" style={{color: props.mode === 'light'? 'black': 'white'}}>\r\n        <h2>Your text summary</h2>\r\n        <p>\r\n          {text.split(\" \").length} words and {text.length} characters\r\n        </p>\r\n        {/* //how to count the time of reading of all the words */}\r\n        <p>{0.008 * text.split(\" \").length} Minuts to read</p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length > 0 ? text :\"Enter something in the textbox above to preview it \"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n    // to capitalize the first letter of the word(success)\r\n    const capitalize = (word) =>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n\r\n  return (\r\n   props.alert && <div\r\n      className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n      role=\"alert\"\r\n    >\r\n     <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n     {/* button for custom removing of alert notification */}\r\n      {/* <button\r\n        type=\"button\"\r\n        className=\"btn-close\"\r\n        data-bs-dismiss=\"alert\"\r\n        aria-label=\"Close\"\r\n      ></button> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","import \"./App.css\";\n// import About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport React, { useState } from \"react\";\nimport Alert from \"./components/Alert\";\n// for routing\n// import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\"); //Whether dark mode is enabled or not\n\n  const [alert, setAlert] = useState(null);\n\n  // created function to set new setAlert\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    // for making stay alert for 3 sec\n    setTimeout(() => {\n      setAlert(null);\n    }, 1800);\n  };\n\n  // function for changing the mode(light/dark)\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#042743\";\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      document.title = \"TextUtils - Dark Mode\";\n      // setInterval(() => {\n      //   document.title='TextUtils is Amazing Mode';\n      // }, 2000);\n\n      // setInterval(() => {\n      //   document.title='Install TextUtils Now';\n      // }, 1500);\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title = \"TextUtils - Light Mode\";\n    }\n  };\n\n  return (\n    <>\n      {/* <Navbar title=\"TextUtils\" aboutText = \"About TextUtils\" /> */}\n      {/* <Navbar  /> */}\n      \n        {/* Routing setup */}\n      {/* <Router> */}\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        {/* <Switch> */}\n          {/* /users ---> component 1 */}\n          {/* /users/home ---> component 2 */}\n          {/* <Route exact path=\"/about\"> */}\n            {/* <About /> */}\n          {/* </Route> */}\n          {/* <Route exact path=\"/\"> */}\n            <TextForm\n              showAlert={showAlert}\n              heading=\"Enter the text to analyze\"\n              mode={mode}\n            />\n          {/* </Route> */}\n        {/* </Switch> */}\n      </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}