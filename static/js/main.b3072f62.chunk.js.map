{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","props","myStyle","color","mode","backgroundColor","border","borderColor","className","style","id","type","Navbar","to","title","aboutText","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","heading","value","onChange","event","target","rows","disabled","length","newText","toUpperCase","showAlert","toLowerCase","Text","toLocaleLowerCase","charAt","slice","document","getElementById","select","navigator","clipboard","writeText","getSelection","removeAllRanges","split","join","filter","element","defaultProps","Alert","height","alert","role","word","lower","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"4NAIe,SAASA,EAAMC,GAQ1B,IAAIC,EAAU,CACZC,MAAsB,SAAfF,EAAMG,KAAkB,QAAU,UACzCC,gBAAgC,SAAfJ,EAAMG,KAAkB,iBAAkB,QAC3DE,OAAQ,YACRC,YAA4B,SAAfN,EAAMG,KAAiB,QAAQ,WAsBhD,OACE,sBAAKI,UAAU,YAAf,UACI,oBAAIA,UAAU,OAAOC,MAAO,CAAEN,MAAsB,SAAfF,EAAMG,KAAkB,QAAU,WAAvE,sBACF,sBAAKI,UAAU,YAAYE,GAAG,mBAAmBD,MAAOP,EAAxD,UACE,sBAAKM,UAAU,iBAAiBC,MAAOP,EAAvC,UACE,oBAAIM,UAAU,mBAAmBE,GAAG,aAApC,SACE,wBACEF,UAAU,mBACVC,MAAOP,EACPS,KAAK,SACL,iBAAe,WACf,iBAAe,eACf,gBAAc,OACd,gBAAc,cAPhB,SASA,2DAGF,qBACED,GAAG,cACHF,UAAU,mCACV,kBAAgB,aAChB,iBAAe,oBAJjB,SAME,qBAAKA,UAAU,iBAAiBC,MAAOP,EAAvC,0FAKJ,sBAAKM,UAAU,iBAAiBC,MAAOP,EAAvC,UACE,oBAAIM,UAAU,mBAAmBE,GAAG,aAApC,SACE,wBACEF,UAAU,6BACVC,MAAOP,EACPS,KAAK,SACL,iBAAe,WACf,iBAAe,eACf,gBAAc,QACd,gBAAc,cAPhB,SASA,qDAGF,qBACED,GAAG,cACHF,UAAU,8BACV,kBAAgB,aAChB,iBAAe,oBAJjB,SAME,qBAAKA,UAAU,iBAAiBC,MAAOP,EAAvC,kQAKJ,sBAAKM,UAAU,iBAAiBC,MAAOP,EAAvC,UACE,oBAAIM,UAAU,mBAAmBE,GAAG,eAApC,SACE,wBACEF,UAAU,6BACVC,MAAOP,EACPS,KAAK,SACL,iBAAe,WACf,iBAAe,iBACf,gBAAc,QACd,gBAAc,gBAPhB,SASC,4DAGH,qBACED,GAAG,gBACHF,UAAU,8BACV,kBAAgB,eAChB,iBAAe,oBAJjB,SAME,qBAAKA,UAAU,iBAAiBC,MAAOP,EAAvC,2O,WC5GG,SAASU,EAAOX,GAC7B,OACE,qBACEO,UAAS,yCAAoCP,EAAMG,KAA1C,eAAqDH,EAAMG,MADtE,SAGE,sBAAKI,UAAU,kBAAf,UACE,cAAC,IAAD,CAAMA,UAAU,eAAeK,GAAG,IAAlC,SACGZ,EAAMa,QAET,wBACEN,UAAU,iBACVG,KAAK,SACL,iBAAe,WACf,iBAAe,0BACf,gBAAc,yBACd,gBAAc,QACd,aAAW,oBAPb,SASE,sBAAMH,UAAU,0BAElB,sBAAKA,UAAU,2BAA2BE,GAAG,yBAA7C,UACE,qBAAIF,UAAU,kCAAd,UACE,oBAAIA,UAAU,WAAd,SACE,cAAC,IAAD,CAAMA,UAAU,YAAY,eAAa,OAAOK,GAAG,IAAnD,oBAIF,oBAAIL,UAAU,WAAd,SACE,cAAC,IAAD,CAAMA,UAAU,WAAWK,GAAG,SAA9B,SACGZ,EAAMc,iBAWb,sBAAKP,UAAS,sCAAgD,UAAfP,EAAMG,KAAmB,OAAQ,SAAhF,UACE,uBACEI,UAAU,mBACVQ,QAAUf,EAAMgB,WAChBN,KAAK,WACLD,GAAG,2BAEL,uBAAOF,UAAU,mBAAmBU,QAAQ,yBAA5C,mBACmB,UAAfjB,EAAMG,KAAmB,mBAAoB,kCChD9C,SAASe,EAASlB,GAG/B,IAmDA,EAAwBmB,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAIA,OACE,qCACE,sBAAKd,UAAU,YAAYC,MAAO,CAACN,MAAsB,UAAfF,EAAMG,KAAkB,QAAS,SAA3E,UACE,oBAAII,UAAU,OAAd,SAAsBP,EAAMsB,UAC5B,qBAAKf,UAAU,OAAf,SACE,0BACEA,UAAU,eACVgB,MAAOH,EACPI,SAjBa,SAACC,GAEtBJ,EAAQI,EAAMC,OAAOH,QAgBbf,MAAO,CAACJ,gBAAgC,UAAfJ,EAAMG,KAAkB,QAAS,UAAUD,MAAsB,UAAfF,EAAMG,KAAkB,QAAS,SAC5GM,GAAG,QACHkB,KAAK,QAGT,wBAAQC,SAA0B,IAAhBR,EAAKS,OAActB,UAAU,4BAA4BQ,QArE3D,WAEpB,IAAIe,EAAUV,EAAKW,cACnBV,EAAQS,GACR9B,EAAMgC,UAAU,yBAAyB,YAiErC,kCAGA,wBAAQJ,SAA0B,IAAhBR,EAAKS,OAActB,UAAU,4BAA4BQ,QAhE3D,WAEpB,IAAIe,EAAUV,EAAKa,cACnBZ,EAAQS,GACR9B,EAAMgC,UAAU,yBAAyB,YA4DrC,kCAGA,wBACEJ,SAA0B,IAAhBR,EAAKS,OACftB,UAAU,4BACVQ,QAhEsB,WAC5B,IAAImB,EAAOd,EAAKe,oBACZL,EAAUI,EAAKE,OAAO,GAAGL,cAAgBG,EAAKG,MAAM,GACxDhB,EAAQS,GACR9B,EAAMgC,UAAU,2BAA2B,YAyDvC,6BAOA,wBACEJ,SAA0B,IAAhBR,EAAKS,OACftB,UAAU,4BACVQ,QAxDY,WAChB,IAAIK,EAAOkB,SAASC,eAAe,SACnCnB,EAAKoB,SACLC,UAAUC,UAAUC,UAAUvB,EAAKG,OAEnCe,SAASM,eAAeC,kBACxB7C,EAAMgC,UAAU,iBAAiB,YA+C/B,uBAOA,wBACEJ,SAA0B,IAAhBR,EAAKS,OACftB,UAAU,4BACVQ,QArDoB,WACtB,IAAIe,EAAUV,EAAK0B,MAAM,QACzBzB,EAAQS,EAAQiB,KAAK,MACrB/C,EAAMgC,UAAU,+BAA+B,YA+C/C,iCAOA,wBAAQJ,SAA0B,IAAhBR,EAAKS,OAActB,UAAU,4BAA4BQ,QA1ExD,WAEvBM,EADc,IAEdrB,EAAMgC,UAAU,uBAAuB,YAuEnC,2BAIF,sBAAKzB,UAAU,iBAAiBC,MAAO,CAACN,MAAsB,UAAfF,EAAMG,KAAkB,QAAS,SAAhF,UACE,mDACA,8BAEGiB,EAAK0B,MAAM,OAAOE,QAAO,SAACC,GAAW,OAAwB,IAAjBA,EAAQpB,UAAaA,OAFpE,cAEuFT,EAAKS,OAF5F,iBAKA,8BAAI,KAAQT,EAAK0B,MAAM,KAAKE,QAAO,SAACC,GAAW,OAAwB,IAAjBA,EAAQpB,UAAaA,OAA3E,qBACA,yCACA,4BAAIT,EAAKS,OAAS,EAAIT,EAAM,8BDrCpCT,EAAOuC,aAAe,CACpBrC,MAAO,iBACPC,UAAW,SErDEqC,MA1Bf,SAAenD,GAOb,OACE,qBAAKQ,MAAQ,CAAC4C,OAAQ,QAAtB,SACApD,EAAMqD,OAAS,sBACb9C,UAAS,sBAAiBP,EAAMqD,MAAM3C,KAA7B,gCACT4C,KAAK,QAFQ,UAId,iCAXkB,SAACC,GAChB,IAAMC,EAAQD,EAAKtB,cACnB,OAAOuB,EAAMpB,OAAO,GAAGL,cAAgByB,EAAMnB,MAAM,GAS7CoB,CAAWzD,EAAMqD,MAAM3C,QAJlB,MAIqCV,EAAMqD,MAAMK,U,OC+DrDC,MArEf,WACE,MAAwBxC,mBAAS,SAAjC,mBAAOhB,EAAP,KAAayD,EAAb,KAEA,EAA0BzC,mBAAS,MAAnC,mBAAOkC,EAAP,KAAcQ,EAAd,KAGM7B,EAAY,SAAC8B,EAASpD,GAC1BmD,EAAS,CACPH,IAAKI,EACLpD,KAAMA,IAGRqD,YAAW,WACTF,EAAS,QACR,OAyBL,OACE,mCAKE,eAAC,IAAD,WACA,cAAClD,EAAD,CAAQE,MAAM,YAAYV,KAAMA,EAAMa,WA5BvB,WACJ,UAATb,GACFyD,EAAQ,QACRtB,SAAS0B,KAAKxD,MAAMJ,gBAAkB,UACtC4B,EAAU,6BAA8B,aAUxC4B,EAAQ,SACRtB,SAAS0B,KAAKxD,MAAMJ,gBAAkB,QACtC4B,EAAU,8BAA+B,eAazC,cAAC,EAAD,CAAOqB,MAAOA,IACd,qBAAK9C,UAAU,iBAAf,SACE,eAAC,IAAD,WAGE,cAAC,IAAD,CAAO0D,OAAK,EAACC,KAAK,SAAlB,SACE,cAACnE,EAAD,CAAOI,KAAMA,MAEf,cAAC,IAAD,CAAO8D,OAAK,EAACC,KAAK,IAAlB,SACE,cAAChD,EAAD,CACEc,UAAWA,EACXV,QAAQ,4FACRnB,KAAMA,iBCxDLgE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFxC,SAASC,eAAe,SAM1B4B,M","file":"static/js/main.b3072f62.chunk.js","sourcesContent":["// import React,{useState} from \"react\";\r\nimport React from \"react\";\r\n\r\n\r\nexport default function About(props) {\r\n\r\n    // const [myStyle, setMyStyle] = useState({\r\n    //     color:'black',\r\n    //     backgroundColor: 'white',\r\n       \r\n    // })\r\n\r\n    let myStyle = {\r\n      color: props.mode === 'dark' ? 'white' : '#042743',\r\n      backgroundColor: props.mode === 'dark' ? 'rgb(36 74 104)' :'white',\r\n      border: '1px solid',\r\n      borderColor: props.mode === 'dark'? 'white':'#042743'\r\n    }\r\n    \r\n    // const [btntext, setBtnText] = useState(\"Enable Dark Mode\")\r\n    \r\n    // const toggleStyle = () =>{\r\n    //     if(myStyle.color==='black'){\r\n    //         setMyStyle({\r\n    //             color: 'white',\r\n    //             backgroundColor:'black',\r\n    //             border: '1px solid white'\r\n    //         })\r\n    //         setBtnText(\"Enable Light Mode\")\r\n    //     }\r\n    //     else{\r\n    //         setMyStyle({\r\n    //             color: 'black',\r\n    //             backgroundColor:'white'\r\n    //         })\r\n    //         setBtnText(\"Enable Dark Mode\")\r\n    //     }\r\n    // }\r\n  return (\r\n    <div className=\"container\" >\r\n        <h1 className=\"my-3\" style={{ color: props.mode === 'dark' ? 'white' : '#042743'}}>About Us</h1>\r\n      <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\r\n        <div className=\"accordion-item\" style={myStyle}>\r\n          <h2 className=\"accordion-header\" id=\"headingOne\">\r\n            <button\r\n              className=\"accordion-button\"\r\n              style={myStyle}\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseOne\"\r\n              aria-expanded=\"true\"\r\n              aria-controls=\"collapseOne\"\r\n            >\r\n            <strong>Analyze Your Text</strong> \r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseOne\"\r\n            className=\"accordion-collapse collapse show\"\r\n            aria-labelledby=\"headingOne\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              Textutils gives you a way to analyze your text quickly and efficiently. \r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\" style={myStyle}>\r\n          <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              style={myStyle}\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseTwo\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseTwo\"\r\n            >\r\n            <strong>Free to Use</strong> \r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseTwo\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingTwo\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n             TextUtils is a free character counter tool that provides instant character count and word count statistics for a given text. TextUtils reports the number of words characters. Thus it is suitable for writing text with word/ character limit.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\" style={myStyle}>\r\n          <h2 className=\"accordion-header\" id=\"headingThree\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              style={myStyle}\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseThree\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseThree\"\r\n            >\r\n             <strong>Browser Compatible</strong> \r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseThree\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingThree\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              This word counter software works in any web browsers such as Chrome, Firefox, Internet Explorer, Safari, Opera. It suits to count characters in facebook, blog, books, excel documents, pdf documents, essays etc.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* <div className=\"container my-3\">\r\n        <button onClick ={toggleStyle} type=\"button\" className=\"btn btn-primary\">{btntext}</button>\r\n      </div> */}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <Link className=\"navbar-brand\" to=\"/\">\r\n          {props.title}\r\n        </Link>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link \" aria-current=\"page\" to=\"/\">\r\n                Home\r\n              </Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">\r\n                {props.aboutText}\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n\r\n          {/* Color palets */}\r\n          {/* <div className=\"d-flex\">\r\n            <div className=\"bg-primary rounded mx-2\" style={{height:'30px',width:'30px'}} onClick></div>\r\n          </div> */}\r\n\r\n          {/* switch */}\r\n          <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark': 'light'}`}>\r\n            <input\r\n              className=\"form-check-input\"\r\n              onClick ={props.toggleMode}\r\n              type=\"checkbox\"\r\n              id=\"flexSwitchCheckDefault\"\r\n            />\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">\r\n            {`${props.mode === 'light' ? 'Enable Dark Mode': 'Disable Dark Mode'}`}\r\n            </label>\r\n          </div>\r\n          {/* <form className=\"d-flex\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-primary\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form> */}\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\n// this is the types of props(string,array,number,object)\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string.isRequired,\r\n};\r\n\r\n// if you wanna set default props or you haven't pass any values through component\r\nNavbar.defaultProps = {\r\n  title: \"Set title here\",\r\n  aboutText: \"About\",\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\n// console.log(useState('Enter text here2 '));\r\n\r\nexport default function TextForm(props) {\r\n\r\n\r\n  const handleUpClick = () => {\r\n    // console.log(\"Uppercase was clicked \" + text);\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to Uppercase\",\"success\")\r\n  };\r\n\r\n  // To convert text into lowercase\r\n  const handleLoClick = () => {\r\n    // console.log(\"Uppercase was clicked \" + text);\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to Lowercase\",\"success\")\r\n  };\r\n  const handleCapitalizeClick = () => {\r\n    let Text = text.toLocaleLowerCase();\r\n    let newText = Text.charAt(0).toUpperCase() + Text.slice(1);\r\n    setText(newText);\r\n    props.showAlert(\"capitalization completed\",\"success\")\r\n  };\r\n\r\n  // to clear the existing text\r\n  const handleClearClick = () => {\r\n    let newText = \"\";\r\n    setText(newText);\r\n    props.showAlert(\"All text are cleared\",\"success\")\r\n  };\r\n\r\n //to copy the text\r\n   const handleCopy = ()=>{\r\n      let text = document.getElementById('myBox');\r\n      text.select();\r\n      navigator.clipboard.writeText(text.value);\r\n      // after copy there is no selected word\r\n      document.getSelection().removeAllRanges();\r\n      props.showAlert(\"Text is copied\",\"success\") \r\n   }\r\n\r\n//   to handle extra spaces\r\n    const handleExtraSpaces = () =>{\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"))\r\n        props.showAlert(\"All extra spaces are removed\",\"success\")\r\n    }\r\n\r\n  //for allow to type in textarea\r\n  const handleOnChange = (event) => {\r\n    // console.log(\"on changed\");\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const [text, setText] = useState(\"\");\r\n  //   text = \"newtext\"wrong way to change the state\r\n  //  setText(\"new text\");correct way\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\" style={{color: props.mode === 'light'? 'black': 'white'}}>\r\n        <h1 className=\"mb-4\">{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            value={text}\r\n            onChange={handleOnChange}\r\n            style={{backgroundColor: props.mode === 'light'? 'white': '#13466e',color: props.mode === 'light'? 'black': 'white'}}\r\n            id=\"myBox\"\r\n            rows=\"8\"\r\n          ></textarea>\r\n        </div>\r\n        <button disabled={text.length === 0} className=\"btn btn-primary mx-2 my-2\" onClick={handleUpClick}>\r\n          Convert to Uppercase\r\n        </button>\r\n        <button disabled={text.length === 0} className=\"btn btn-primary mx-2 my-2\" onClick={handleLoClick}>\r\n          Convert to Lowercase\r\n        </button>\r\n        <button\r\n          disabled={text.length === 0}\r\n          className=\"btn btn-primary mx-2 my-2\"\r\n          onClick={handleCapitalizeClick}\r\n        >\r\n          Capitalize text\r\n        </button>\r\n        <button\r\n          disabled={text.length === 0}\r\n          className=\"btn btn-primary mx-2 my-2\"\r\n          onClick={handleCopy}\r\n        >\r\n          Copy Text\r\n        </button>\r\n        <button\r\n          disabled={text.length === 0}\r\n          className=\"btn btn-primary mx-2 my-2\"\r\n          onClick={handleExtraSpaces}\r\n        >\r\n          Remove Extra Spaces\r\n        </button>\r\n        <button disabled={text.length === 0} className=\"btn btn-primary mx-2 my-2\" onClick={handleClearClick}>\r\n          Clear text\r\n        </button>\r\n      </div>\r\n      <div className=\"container my-3\" style={{color: props.mode === 'light'? 'black': 'white'}}>\r\n        <h2>Your text summary</h2>\r\n        <p>\r\n          {/* this will count the words and characters */}\r\n          {text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} words and {text.length} characters\r\n        </p>\r\n        {/* //how to count the time of reading of all the words */}\r\n        <p>{0.008 * text.split(\" \").filter((element)=>{return element.length!==0}).length} Minuts to read</p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length > 0 ? text :\"Nothing to preview \"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n    // to capitalize the first letter of the word(success)\r\n    const capitalize = (word) =>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n\r\n  return (\r\n    <div style= {{height: '50px'}}>\r\n  { props.alert && <div\r\n      className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n      role=\"alert\"\r\n    >\r\n     <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n     {/* button for custom removing of alert notification */}\r\n      {/* <button\r\n        type=\"button\"\r\n        className=\"btn-close\"\r\n        data-bs-dismiss=\"alert\"\r\n        aria-label=\"Close\"\r\n      ></button> */}\r\n    </div>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","import \"./App.css\";\nimport About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport React, { useState } from \"react\";\nimport Alert from \"./components/Alert\";\n// for routing\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\"); //Whether dark mode is enabled or not\n\n  const [alert, setAlert] = useState(null);\n\n  // created function to set new setAlert\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    // for making stay alert for 3 sec\n    setTimeout(() => {\n      setAlert(null);\n    }, 1800);\n  };\n\n  // function for changing the mode(light/dark)\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#042743\";\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      // document.title = \"TextUtils - Dark Mode\";\n      // setInterval(() => {\n      //   document.title='TextUtils is Amazing Mode';\n      // }, 2000);\n\n      // setInterval(() => {\n      //   document.title='Install TextUtils Now';\n      // }, 1500);\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled\", \"success\");\n      // document.title = \"TextUtils - Light Mode\";\n    }\n  };\n\n  return (\n    <>\n      {/* <Navbar title=\"TextUtils\" aboutText = \"About TextUtils\" /> */}\n      {/* <Navbar  /> */}\n      \n        {/* Routing setup */}\n      <Router>\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        <Switch>\n          {/* /users ---> component 1 */}\n          {/* /users/home ---> component 2 */}\n          <Route exact path=\"/about\">\n            <About mode={mode}/>\n          </Route>\n          <Route exact path=\"/\">\n            <TextForm\n              showAlert={showAlert}\n              heading=\"Use TextUtils - Word Counter, Character Counter, Remove extra spaces, Capitalize the text\"\n              mode={mode}\n            />\n          </Route>\n        </Switch>\n      </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}